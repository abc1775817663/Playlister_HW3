{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  CLEAR_MARK_LIST: \"CLEAR_MARKED_LIST\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markListForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: payload.markedList\n          });\n        }\n      // FINISHED DELETE A LIST\n\n      case GlobalStoreActionType.CLEAR_MARK_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: null\n          });\n        }\n      // DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markListForDeletion: store.markListForDeletion\n          });\n        }\n\n      default:\n        return store;\n    }\n  };\n\n  store.showDeleteListModal = async function (_id) {\n    let markedList = store.idNamePairs.filter(list => list._id === _id)[0];\n    console.log(markedList);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: {\n        markedList\n      }\n    });\n  };\n\n  store.hideDeleteListModal = async function () {\n    console.log(\"hiding the modal...\");\n    storeReducer({\n      type: GlobalStoreActionType.CLEAR_MARK_LIST\n    });\n  };\n\n  store.deleteList = async function () {\n    let _id = store.markListForDeletion._id;\n    await api.deleteListById(_id);\n    let updatedNamePairs = store.idNamePairs.filter(list => list._id !== _id);\n    storeReducer({\n      type: GlobalStoreActionType.DELETE_LIST,\n      payload: {\n        updatedNamePairs\n      }\n    });\n    this.loadIdNamePairs;\n  };\n\n  store.createNewList = async function () {\n    let list = {\n      name: \"Untitled\",\n      songs: []\n    };\n    await api.createPlaylist(list);\n    this.loadIdNamePairs();\n    storeReducer({\n      type: GlobalStoreActionType.CREATE_NEW_LIST,\n      payload: {\n        list\n      }\n    });\n    const response = await api.getPlaylistPairs();\n\n    if (response.data.success) {\n      let pairs = response.data.idNamePairs;\n      let _id = pairs[pairs.length - 1]._id;\n      document.getElementById(\"edit-list-\" + _id).click();\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id); // console.log(response);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist); // console.log(response);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"9bNr7q2TDo0W4Frtuj/x46sYc8U=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","CLEAR_MARK_LIST","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markListForDeletion","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","markedList","DELETE_LIST","showDeleteListModal","_id","filter","list","console","log","hideDeleteListModal","deleteList","deleteListById","updatedNamePairs","loadIdNamePairs","createNewList","name","songs","createPlaylist","response","getPlaylistPairs","data","success","pairs","length","document","getElementById","click","changeListName","id","newName","asyncChangeListName","getPlaylistById","updateList","updatePlaylistById","getListPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["C:/Users/abc17/OneDrive - Stony Brook University/desktop/CSE 316/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    CLEAR_MARK_LIST: \"CLEAR_MARKED_LIST\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        markListForDeletion: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: payload.markedList\r\n                });\r\n            }\r\n            // FINISHED DELETE A LIST\r\n            case GlobalStoreActionType.CLEAR_MARK_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: null\r\n                });\r\n            }\r\n            // DELETE A LIST\r\n            case GlobalStoreActionType.DELETE_LIST: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    markListForDeletion: store.markListForDeletion\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    store.showDeleteListModal = async function(_id){\r\n        let markedList = store.idNamePairs.filter(list => list._id === _id)[0];\r\n        console.log(markedList)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n            payload: {\r\n                markedList\r\n            }\r\n        });\r\n    }\r\n\r\n    store.hideDeleteListModal = async function(){\r\n        console.log(\"hiding the modal...\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLEAR_MARK_LIST,\r\n        });\r\n    }\r\n    store.deleteList = async function(){\r\n        \r\n\r\n        let _id = store.markListForDeletion._id;\r\n        await api.deleteListById(_id);\r\n        let updatedNamePairs = store.idNamePairs.filter(list => list._id !== _id);\r\n\r\n        \r\n        storeReducer({\r\n            type: GlobalStoreActionType.DELETE_LIST,\r\n            payload: {\r\n                updatedNamePairs\r\n            }\r\n        });\r\n\r\n        this.loadIdNamePairs\r\n        \r\n    }\r\n\r\n    store.createNewList = async function(){\r\n        let list = {\r\n            name: \"Untitled\",\r\n            songs: []\r\n        };\r\n        await api.createPlaylist(list);\r\n\r\n\r\n        this.loadIdNamePairs();\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n            payload: {\r\n                list\r\n            }\r\n        });\r\n\r\n\r\n        const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairs = response.data.idNamePairs;\r\n                let _id = pairs[pairs.length-1]._id;\r\n                document.getElementById(\"edit-list-\"+_id).click();\r\n                \r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n\r\n\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            // console.log(response);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    // console.log(response);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n   \r\n\r\n\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}