{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  CLEAR_MARK_LIST: \"CLEAR_MARKED_LIST\",\n  DELETE_LIST: \"DELETE_LIST\",\n  UPDATE_CURRENT_LIST: \"UPDATE_CURRENT_LIST\",\n  MARK_SONG_FOR_EDITING: \"MARK_SONG_FOR_EDITING\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  CLEAR_MARK_SONG: \"CLEAR_MARK_SONG\",\n  UPDATE: \"UPDATE\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markListForDeletion: null,\n    markSongForEditing: null,\n    markSongForDeletion: null,\n    songInfoActive: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: null,\n            songInfoActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: payload,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITING:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: payload,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: true\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: payload,\n            songInfoActive: true\n          });\n        }\n      // FINISHED DELETE A LIST\n\n      case GlobalStoreActionType.CLEAR_MARK_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: null,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.CLEAR_MARK_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: null,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n      // DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          console.log(payload);\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: null,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForDeletion: store.markSongForDeletion,\n            songInfoActive: false\n          });\n        }\n\n      default:\n        return store;\n    }\n  };\n\n  store.showDeleteListModal = async function (_id) {\n    let markedList = store.idNamePairs.filter(list => list._id === _id)[0];\n    console.log(markedList);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: markedList\n    });\n  };\n\n  store.showEditSongModal = async function (idx) {\n    let markedSong = this.currentList.songs[idx];\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\n      payload: markedSong\n    });\n  };\n\n  store.hideDeleteListModal = async function () {\n    console.log(\"hiding the modal...\");\n    storeReducer({\n      type: GlobalStoreActionType.CLEAR_MARK_LIST\n    });\n  };\n\n  store.hideEditSongModal = async function () {\n    console.log(\"hiding the modal...\");\n    storeReducer({\n      type: GlobalStoreActionType.CLEAR_MARK_SONG\n    });\n  };\n\n  store.deleteList = async function () {\n    let _id = store.markListForDeletion._id;\n    await api.deleteListById(_id);\n    let updatedNamePairs = store.idNamePairs.filter(list => list._id !== _id);\n    console.log(updatedNamePairs);\n    storeReducer({\n      type: GlobalStoreActionType.DELETE_LIST,\n      payload: updatedNamePairs\n    }); // console.log(store.markListForDeletion);\n  };\n\n  store.addNewSong = async function () {\n    this.currentList.songs.push({\n      artist: \"Unknown\",\n      title: \"Untitled\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    });\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n      payload: this.currentList\n    });\n  };\n\n  store.createNewList = async function () {\n    let list = {\n      name: \"Untitled\",\n      songs: []\n    };\n\n    let _id = await (await api.createPlaylist(list)).data.playlist._id;\n\n    await this.loadIdNamePairs();\n    storeReducer({\n      type: GlobalStoreActionType.CREATE_NEW_LIST,\n      payload: {\n        list\n      }\n    });\n    this.setCurrentList(_id); // const response = await api.getPlaylistPairs();\n    //     if (response.data.success) {\n    //         let pairs = response.data.idNamePairs;\n    //         let _id = pairs[pairs.length-1]._id;\n    //         document.getElementById(\"edit-list-\"+_id).click();\n    //     }\n    //     else {\n    //         console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    //     }\n  };\n\n  store.saveEditedSong = function (title, artist, youTubeId) {\n    this.markSongForEditing.artist = artist;\n    this.markSongForEditing.title = title;\n    this.markSongForEditing.youTubeId = youTubeId;\n    api.updatePlaylistById(this.currentList._id, this.currentList);\n    this.hideEditSongModal(); // storeReducer({\n    //     type: GlobalStoreActionType.UPDATE\n    // });\n  };\n\n  store.removeSongByIndex = async function (idx) {\n    this.currentList.songs.splice(idx);\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n      payload: this.currentList\n    });\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id); // console.log(response);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist); // console.log(response);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"PD/D/o6w7z2BwgKNuMPL5Y4/uEc=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","CLEAR_MARK_LIST","DELETE_LIST","UPDATE_CURRENT_LIST","MARK_SONG_FOR_EDITING","MARK_LIST_FOR_DELETION","CLEAR_MARK_SONG","UPDATE","MARK_SONG_FOR_DELETION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markListForDeletion","markSongForEditing","markSongForDeletion","songInfoActive","storeReducer","action","type","payload","playlist","console","log","showDeleteListModal","_id","markedList","filter","list","showEditSongModal","idx","markedSong","songs","hideDeleteListModal","hideEditSongModal","deleteList","deleteListById","updatedNamePairs","addNewSong","push","artist","title","youTubeId","updatePlaylistById","createNewList","name","createPlaylist","data","loadIdNamePairs","setCurrentList","saveEditedSong","removeSongByIndex","splice","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","success","updateList","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","asyncSetCurrentList","history","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["C:/Users/abc17/OneDrive - Stony Brook University/desktop/CSE 316/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    CLEAR_MARK_LIST: \"CLEAR_MARKED_LIST\",\r\n    DELETE_LIST: \"DELETE_LIST\",\r\n    UPDATE_CURRENT_LIST: \"UPDATE_CURRENT_LIST\",\r\n    MARK_SONG_FOR_EDITING: \"MARK_SONG_FOR_EDITING\",\r\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\r\n    CLEAR_MARK_SONG: \"CLEAR_MARK_SONG\",\r\n    UPDATE: \"UPDATE\",\r\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        markListForDeletion: null,\r\n        markSongForEditing: null,\r\n        markSongForDeletion: null,\r\n        songInfoActive: false\r\n        \r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: null,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: payload,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            case GlobalStoreActionType.MARK_SONG_FOR_EDITING: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: payload,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: true\r\n                });\r\n            }\r\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: payload,\r\n                    songInfoActive: true\r\n                });\r\n            }\r\n            // FINISHED DELETE A LIST\r\n            case GlobalStoreActionType.CLEAR_MARK_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: null,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.CLEAR_MARK_SONG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: null,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n\r\n            // DELETE A LIST\r\n            case GlobalStoreActionType.DELETE_LIST: {\r\n                console.log(payload);\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: null,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            case GlobalStoreActionType.UPDATE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.listNameActive,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            case GlobalStoreActionType.UPDATE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.listNameActive,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForDeletion: store.markSongForDeletion,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    store.showDeleteListModal = async function(_id){\r\n        let markedList = store.idNamePairs.filter(list => list._id === _id)[0];\r\n        console.log(markedList)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n            payload: markedList\r\n        });\r\n    }\r\n\r\n    store.showEditSongModal = async function(idx){\r\n        let markedSong = this.currentList.songs[idx];\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\r\n            payload: markedSong\r\n        });\r\n    }\r\n\r\n    store.hideDeleteListModal = async function(){\r\n        console.log(\"hiding the modal...\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLEAR_MARK_LIST,\r\n        });\r\n    }\r\n\r\n    store.hideEditSongModal = async function(){\r\n        console.log(\"hiding the modal...\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLEAR_MARK_SONG\r\n        });\r\n    }\r\n    store.deleteList = async function(){\r\n        \r\n\r\n        let _id = store.markListForDeletion._id;\r\n        await api.deleteListById(_id);\r\n        let updatedNamePairs = store.idNamePairs.filter(list => list._id !== _id);\r\n\r\n        console.log(updatedNamePairs);\r\n\r\n        storeReducer({\r\n            type: GlobalStoreActionType.DELETE_LIST,\r\n            payload: updatedNamePairs\r\n            \r\n        });\r\n\r\n        // console.log(store.markListForDeletion);\r\n\r\n        \r\n        \r\n    }\r\n    store.addNewSong = async function() {\r\n        this.currentList.songs.push({artist: \"Unknown\", title: \"Untitled\", youTubeId: \"dQw4w9WgXcQ\"});\r\n        await api.updatePlaylistById(this.currentList._id, this.currentList)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\r\n            payload: this.currentList\r\n        });\r\n    }\r\n\r\n    store.createNewList = async function(){\r\n        let list = {\r\n            name: \"Untitled\",\r\n            songs: []\r\n        };\r\n        let _id = await (await api.createPlaylist(list)).data.playlist._id;\r\n\r\n        await this.loadIdNamePairs();\r\n\r\n        \r\n        storeReducer({\r\n            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n            payload: {\r\n                list\r\n            }\r\n        });\r\n        this.setCurrentList(_id);\r\n\r\n\r\n\r\n        // const response = await api.getPlaylistPairs();\r\n        //     if (response.data.success) {\r\n        //         let pairs = response.data.idNamePairs;\r\n        //         let _id = pairs[pairs.length-1]._id;\r\n        //         document.getElementById(\"edit-list-\"+_id).click();\r\n                \r\n        //     }\r\n        //     else {\r\n        //         console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n        //     }\r\n\r\n\r\n    }\r\n    store.saveEditedSong = function(title,artist, youTubeId){\r\n        this.markSongForEditing.artist = artist;\r\n        this.markSongForEditing.title = title;\r\n        this.markSongForEditing.youTubeId = youTubeId;\r\n        api.updatePlaylistById(this.currentList._id, this.currentList);\r\n        this.hideEditSongModal();\r\n        // storeReducer({\r\n        //     type: GlobalStoreActionType.UPDATE\r\n        // });\r\n        \r\n\r\n    }\r\n\r\n    store.removeSongByIndex = async function(idx){\r\n        this.currentList.songs.splice(idx);\r\n        \r\n        await api.updatePlaylistById(this.currentList._id, this.currentList)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\r\n            payload: this.currentList\r\n        });\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            // console.log(response);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    // console.log(response);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n   \r\n\r\n\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}