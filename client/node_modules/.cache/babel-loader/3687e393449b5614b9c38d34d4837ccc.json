{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport AddSong_Transaction from '../common/addSongTransaction';\nimport DeleteSong_Transaction from '../common/deleteSongTransaction';\nimport EditSong_Transaction from '../common/EditSongTransation';\nimport api from '../api';\nimport MoveSong_Transaction from '../common/moveSongTransaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  CLEAR_MARK_LIST: \"CLEAR_MARKED_LIST\",\n  DELETE_LIST: \"DELETE_LIST\",\n  UPDATE_CURRENT_LIST: \"UPDATE_CURRENT_LIST\",\n  MARK_SONG_FOR_EDITING: \"MARK_SONG_FOR_EDITING\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  CLEAR_MARK_SONG: \"CLEAR_MARK_SONG\",\n  UPDATE: \"UPDATE\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  CLEAR_MARK_SONG_FOR_DELETION_IDX: \"CLEAR_MARK_SONG_FOR_DELETION_IDX\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markListForDeletion: null,\n    markSongForEditing: null,\n    markSongForEditingIdx: null,\n    markSongForDeletionIdx: null,\n    songInfoActive: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: null,\n            songInfoActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: null,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: null,\n            songInfoActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: store.markSongForDeletionIdx,\n            songInfoActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: store.markSongForDeletionIdx,\n            songInfoActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: payload,\n            markSongForEditing: null,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: null,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITING:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: payload.markSongForEditing,\n            markSongForEditingIdx: payload.markSongForEditingIdx,\n            markSongForDeletionIdx: null,\n            songInfoActive: true\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: null,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: payload,\n            songInfoActive: false\n          });\n        }\n      // FINISHED DELETE A LIST\n\n      case GlobalStoreActionType.CLEAR_MARK_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: null,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: store.markSongForDeletionIdx,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.CLEAR_MARK_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: null,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: null,\n            songInfoActive: false\n          });\n        }\n      // DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          console.log(payload);\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: null,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: store.markSongForDeletionIdx,\n            songInfoActive: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: store.markSongForDeletionIdx,\n            songInfoActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: store.markSongForDeletionIdx,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: store.markSongForDeletionIdx,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: store.markSongForDeletionIdx,\n            songInfoActive: false\n          });\n        }\n\n      case GlobalStoreActionType.CLEAR_MARK_SONG_FOR_DELETION_IDX:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markListForDeletion: store.markListForDeletion,\n            markSongForEditing: store.markSongForEditing,\n            markSongForEditingIdx: store.markSongForEditingIdx,\n            markSongForDeletionIdx: null,\n            songInfoActive: false\n          });\n        }\n\n      default:\n        return store;\n    }\n  };\n\n  store.showDeleteListModal = async function (_id) {\n    let markedList = store.idNamePairs.filter(list => list._id === _id)[0];\n    console.log(markedList);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: markedList\n    });\n  };\n\n  store.showEditSongModal = async function (idx) {\n    let markedSong = this.currentList.songs[idx];\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\n      payload: {\n        markSongForEditing: markedSong,\n        markSongForEditingIdx: idx\n      }\n    });\n  };\n\n  store.hideDeleteListModal = async function () {\n    console.log(\"hiding the modal...\");\n    storeReducer({\n      type: GlobalStoreActionType.CLEAR_MARK_LIST\n    });\n  };\n\n  store.hideEditSongModal = async function () {\n    console.log(\"hiding the modal...\");\n    storeReducer({\n      type: GlobalStoreActionType.CLEAR_MARK_SONG\n    });\n  };\n\n  store.deleteList = async function () {\n    let _id = store.markListForDeletion._id;\n    await api.deleteListById(_id);\n    let updatedNamePairs = store.idNamePairs.filter(list => list._id !== _id);\n    console.log(updatedNamePairs);\n    storeReducer({\n      type: GlobalStoreActionType.DELETE_LIST,\n      payload: updatedNamePairs\n    }); // console.log(store.markListForDeletion);\n  };\n\n  store.addNewSong = async function () {\n    this.currentList.songs.push({\n      artist: \"Unknown\",\n      title: \"Untitled\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    });\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n      payload: this.currentList\n    });\n  };\n\n  store.addSongByIndex = async function (index, song) {\n    this.currentList.songs.splice(index, 0, song);\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n      payload: this.currentList\n    });\n  };\n\n  store.createNewList = async function () {\n    let list = {\n      name: \"Untitled\",\n      songs: []\n    };\n\n    let _id = await (await api.createPlaylist(list)).data.playlist._id;\n\n    await this.loadIdNamePairs();\n    storeReducer({\n      type: GlobalStoreActionType.CREATE_NEW_LIST,\n      payload: {\n        list\n      }\n    });\n    this.setCurrentList(_id);\n  };\n\n  store.saveEditedSong = function (title, artist, youTubeId) {\n    this.markSongForEditing.artist = artist;\n    this.markSongForEditing.title = title;\n    this.markSongForEditing.youTubeId = youTubeId;\n    api.updatePlaylistById(this.currentList._id, this.currentList);\n    this.hideEditSongModal();\n    this.markSongForEditing = null; // storeReducer({\n    //     type: GlobalStoreActionType.UPDATE\n    // });\n  };\n\n  store.update = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE\n    });\n  };\n\n  store.updateCurrentList = function () {\n    api.updatePlaylistById(this.currentList._id, this.currentList);\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE\n    });\n  };\n\n  store.showDeleteSongModal = async function (idx) {\n    console.log(\"showing delete song modal...\"); // let markedSong = this.currentList.songs[idx];\n    // console.log(markedSong);\n\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: idx\n    });\n  };\n\n  store.hideDeleteSongModal = async function () {\n    console.log(\"hiding the modal...\");\n    storeReducer({\n      type: GlobalStoreActionType.CLEAR_MARK_SONG\n    });\n  };\n\n  store.removeSongByIndex = async function () {\n    console.log(this);\n    console.log(this.currentList);\n    this.currentList.songs.splice(this.markSongForDeletionIdx, 1);\n    console.log(this.currentList);\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    this.hideDeleteSongModal();\n    this.markSongForDeletionIdx = null;\n    console.log(this.markSongForDeletionIdx);\n  };\n\n  store.removeSongBySpecifiedIndex = async function (idx) {\n    console.log(this);\n    console.log(this.currentList);\n    this.currentList.songs.splice(idx, 1);\n    console.log(this.currentList);\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    this.hideDeleteSongModal();\n    this.markSongForDeletionIdx = null;\n    console.log(this.markSongForDeletionIdx);\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id); // console.log(response);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist); // console.log(response);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    this.clearAllTransaction();\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.moveSong = function (start, end) {\n    let songs = this.currentList.songs; // WE NEED TO UPDATE THE STATE FOR THE APP\n\n    console.log(songs);\n    let temp = songs[end];\n    songs[end] = songs[start];\n    songs[start] = temp;\n    console.log(songs);\n    this.updateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  store.hasTransactionToUndo = function () {\n    return tps.hasTransactionToUndo();\n  };\n\n  store.hasTransactionToRedo = function () {\n    return tps.hasTransactionToRedo();\n  };\n\n  store.addAddSongTransaction = function () {\n    tps.addTransaction(new AddSong_Transaction(this));\n  };\n\n  store.addDeleteSongTransaction = function () {\n    tps.addTransaction(new DeleteSong_Transaction(this));\n  };\n\n  store.addEditSongTransaction = function (title, artist, youTubeId) {\n    tps.addTransaction(new EditSong_Transaction(this, title, artist, youTubeId));\n  };\n\n  store.addMoveSongTransaction = function (oldIdx, newIdx) {\n    tps.addTransaction(new MoveSong_Transaction(this, oldIdx, newIdx));\n  };\n\n  store.clearAllTransaction = function () {\n    tps.clearAllTransactions();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"TNLhXHlRKCLqwyrQquYl6ByHjwc=\");","map":{"version":3,"names":["createContext","useState","jsTPS","AddSong_Transaction","DeleteSong_Transaction","EditSong_Transaction","api","MoveSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","CLEAR_MARK_LIST","DELETE_LIST","UPDATE_CURRENT_LIST","MARK_SONG_FOR_EDITING","MARK_LIST_FOR_DELETION","CLEAR_MARK_SONG","UPDATE","MARK_SONG_FOR_DELETION","CLEAR_MARK_SONG_FOR_DELETION_IDX","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markListForDeletion","markSongForEditing","markSongForEditingIdx","markSongForDeletionIdx","songInfoActive","storeReducer","action","type","payload","console","log","showDeleteListModal","_id","markedList","filter","list","showEditSongModal","idx","markedSong","songs","hideDeleteListModal","hideEditSongModal","deleteList","deleteListById","updatedNamePairs","addNewSong","push","artist","title","youTubeId","updatePlaylistById","addSongByIndex","index","song","splice","createNewList","name","createPlaylist","data","playlist","loadIdNamePairs","setCurrentList","saveEditedSong","update","updateCurrentList","showDeleteSongModal","hideDeleteSongModal","removeSongByIndex","removeSongBySpecifiedIndex","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","success","updateList","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","clearAllTransaction","asyncLoadIdNamePairs","asyncSetCurrentList","history","getPlaylistSize","length","moveSong","start","end","temp","undo","undoTransaction","redo","doTransaction","hasTransactionToUndo","hasTransactionToRedo","addAddSongTransaction","addTransaction","addDeleteSongTransaction","addEditSongTransaction","addMoveSongTransaction","oldIdx","newIdx","clearAllTransactions","setlistNameActive"],"sources":["C:/Users/abc17/OneDrive - Stony Brook University/desktop/CSE 316/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport AddSong_Transaction from '../common/addSongTransaction'\r\nimport DeleteSong_Transaction from '../common/deleteSongTransaction'\r\nimport EditSong_Transaction from '../common/EditSongTransation'\r\nimport api from '../api'\r\nimport MoveSong_Transaction from '../common/moveSongTransaction'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    CLEAR_MARK_LIST: \"CLEAR_MARKED_LIST\",\r\n    DELETE_LIST: \"DELETE_LIST\",\r\n    UPDATE_CURRENT_LIST: \"UPDATE_CURRENT_LIST\",\r\n    MARK_SONG_FOR_EDITING: \"MARK_SONG_FOR_EDITING\",\r\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\r\n    CLEAR_MARK_SONG: \"CLEAR_MARK_SONG\",\r\n    UPDATE: \"UPDATE\",\r\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\r\n    CLEAR_MARK_SONG_FOR_DELETION_IDX: \"CLEAR_MARK_SONG_FOR_DELETION_IDX\",\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        markListForDeletion: null,\r\n        markSongForEditing: null,\r\n        markSongForEditingIdx: null,\r\n        markSongForDeletionIdx: null,\r\n        songInfoActive: false\r\n        \r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: null,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: null,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: null,\r\n                    songInfoActive: false\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: store.markSongForDeletionIdx,\r\n                    songInfoActive: false\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: store.markSongForDeletionIdx,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: payload,\r\n                    markSongForEditing: null,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: null,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            case GlobalStoreActionType.MARK_SONG_FOR_EDITING: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: payload.markSongForEditing,\r\n                    markSongForEditingIdx: payload.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: null,\r\n                    songInfoActive: true\r\n                });\r\n            }\r\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: null,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: payload,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // FINISHED DELETE A LIST\r\n            case GlobalStoreActionType.CLEAR_MARK_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: null,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: store.markSongForDeletionIdx,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.CLEAR_MARK_SONG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: null,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: null,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n\r\n            // DELETE A LIST\r\n            case GlobalStoreActionType.DELETE_LIST: {\r\n                console.log(payload);\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: null,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: store.markSongForDeletionIdx,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: store.markSongForDeletionIdx,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: store.markSongForDeletionIdx,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            case GlobalStoreActionType.UPDATE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.listNameActive,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: store.markSongForDeletionIdx,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            case GlobalStoreActionType.UPDATE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.listNameActive,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: store.markSongForDeletionIdx,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            case GlobalStoreActionType.CLEAR_MARK_SONG_FOR_DELETION_IDX: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.listNameActive,\r\n                    markListForDeletion: store.markListForDeletion,\r\n                    markSongForEditing: store.markSongForEditing,\r\n                    markSongForEditingIdx: store.markSongForEditingIdx,\r\n                    markSongForDeletionIdx: null,\r\n                    songInfoActive: false\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    store.showDeleteListModal = async function(_id){\r\n        let markedList = store.idNamePairs.filter(list => list._id === _id)[0];\r\n        console.log(markedList)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n            payload: markedList\r\n        });\r\n    }\r\n\r\n    store.showEditSongModal = async function(idx){\r\n        let markedSong = this.currentList.songs[idx];\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\r\n            payload: {\r\n                markSongForEditing: markedSong,\r\n                markSongForEditingIdx: idx\r\n            }\r\n        });\r\n    }\r\n\r\n    store.hideDeleteListModal = async function(){\r\n        console.log(\"hiding the modal...\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLEAR_MARK_LIST,\r\n        });\r\n    }\r\n\r\n    store.hideEditSongModal = async function(){\r\n        console.log(\"hiding the modal...\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLEAR_MARK_SONG\r\n        });\r\n    }\r\n    store.deleteList = async function(){\r\n        \r\n\r\n        let _id = store.markListForDeletion._id;\r\n        await api.deleteListById(_id);\r\n        let updatedNamePairs = store.idNamePairs.filter(list => list._id !== _id);\r\n\r\n        console.log(updatedNamePairs);\r\n\r\n        storeReducer({\r\n            type: GlobalStoreActionType.DELETE_LIST,\r\n            payload: updatedNamePairs\r\n            \r\n        });\r\n\r\n        // console.log(store.markListForDeletion);\r\n\r\n        \r\n        \r\n    }\r\n    store.addNewSong = async function() {\r\n        this.currentList.songs.push({artist: \"Unknown\", title: \"Untitled\", youTubeId: \"dQw4w9WgXcQ\"});\r\n        await api.updatePlaylistById(this.currentList._id, this.currentList)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\r\n            payload: this.currentList\r\n        });\r\n    }\r\n    store.addSongByIndex = async function(index,song) {\r\n        this.currentList.songs.splice(index, 0, song);\r\n        await api.updatePlaylistById(this.currentList._id, this.currentList)\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\r\n            payload: this.currentList\r\n        });\r\n\r\n    }\r\n\r\n    store.createNewList = async function(){\r\n        let list = {\r\n            name: \"Untitled\",\r\n            songs: []\r\n        };\r\n        let _id = await (await api.createPlaylist(list)).data.playlist._id;\r\n\r\n        await this.loadIdNamePairs();\r\n\r\n        \r\n        storeReducer({\r\n            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n            payload: {\r\n                list\r\n            }\r\n        });\r\n        this.setCurrentList(_id);\r\n\r\n\r\n    }\r\n    store.saveEditedSong = function(title,artist, youTubeId){\r\n        this.markSongForEditing.artist = artist;\r\n        this.markSongForEditing.title = title;\r\n        this.markSongForEditing.youTubeId = youTubeId;\r\n        api.updatePlaylistById(this.currentList._id, this.currentList);\r\n        this.hideEditSongModal();\r\n        this.markSongForEditing = null;\r\n        // storeReducer({\r\n        //     type: GlobalStoreActionType.UPDATE\r\n        // });\r\n    }\r\n    store.update = function(){\r\n        \r\n        storeReducer({\r\n            type: GlobalStoreActionType.UPDATE\r\n        });\r\n    }\r\n    store.updateCurrentList = function(){\r\n        api.updatePlaylistById(this.currentList._id, this.currentList);\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UPDATE\r\n        });\r\n    }\r\n\r\n    store.showDeleteSongModal = async function(idx){\r\n        console.log(\"showing delete song modal...\");\r\n        // let markedSong = this.currentList.songs[idx];\r\n        // console.log(markedSong);\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\r\n            payload: idx\r\n        });\r\n    }\r\n\r\n    store.hideDeleteSongModal = async function(){\r\n        console.log(\"hiding the modal...\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLEAR_MARK_SONG,\r\n        });\r\n    }\r\n\r\n    store.removeSongByIndex = async function(){\r\n        console.log(this);\r\n        console.log(this.currentList);\r\n        this.currentList.songs.splice(this.markSongForDeletionIdx,1);\r\n        console.log(this.currentList);\r\n        \r\n        await api.updatePlaylistById(this.currentList._id, this.currentList);\r\n        this.hideDeleteSongModal();\r\n        this.markSongForDeletionIdx = null;\r\n        console.log(this.markSongForDeletionIdx);\r\n\r\n    }\r\n\r\n    store.removeSongBySpecifiedIndex = async function(idx){\r\n        console.log(this);\r\n        console.log(this.currentList);\r\n        this.currentList.songs.splice(idx,1);\r\n        console.log(this.currentList);\r\n        \r\n        await api.updatePlaylistById(this.currentList._id, this.currentList);\r\n        this.hideDeleteSongModal();\r\n        this.markSongForDeletionIdx = null;\r\n        console.log(this.markSongForDeletionIdx);\r\n\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            // console.log(response);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    // console.log(response);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        this.clearAllTransaction();\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.moveSong = function(start, end) {\r\n        let songs = this.currentList.songs;\r\n\r\n        // WE NEED TO UPDATE THE STATE FOR THE APP\r\n        console.log(songs);\r\n        let temp = songs[end];\r\n        songs[end] = songs[start];\r\n        songs[start] = temp;\r\n\r\n        console.log(songs);\r\n\r\n        this.updateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n    store.hasTransactionToUndo = function(){\r\n        return tps.hasTransactionToUndo();\r\n    }\r\n    store.hasTransactionToRedo = function(){\r\n        return tps.hasTransactionToRedo();\r\n    }\r\n    store.addAddSongTransaction = function () {\r\n        tps.addTransaction(new AddSong_Transaction(this));\r\n    }\r\n    store.addDeleteSongTransaction = function (){\r\n        tps.addTransaction(new DeleteSong_Transaction(this));\r\n    }\r\n    store.addEditSongTransaction = function (title, artist, youTubeId){\r\n        tps.addTransaction(new EditSong_Transaction(this, title, artist, youTubeId));\r\n    }\r\n    store.addMoveSongTransaction = function (oldIdx, newIdx){\r\n        tps.addTransaction(new MoveSong_Transaction(this, oldIdx, newIdx));\r\n    }\r\n    store.clearAllTransaction = function() {\r\n        tps.clearAllTransactions();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n   \r\n\r\n\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}